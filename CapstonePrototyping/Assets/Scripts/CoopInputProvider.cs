using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Users;

public class CoopInputProvider : MonoBehaviour, CoOpInputActionMap.IGameplayActions
{
    public int PlayerNumber { get; private set; }

    private InputUser user;
    private CoOpInputActionMap actionMap;
    
    // Unity Events
    public UnityEvent<InputAction.CallbackContext> OnMove;
    public UnityEvent<InputAction.CallbackContext> OnLook;
    public UnityEvent<InputAction.CallbackContext> OnJump;
    public UnityEvent<InputAction.CallbackContext> OnSprint;
    public UnityEvent<bool> OnIsMouseChange;

    public void SetupNewPlayerInput(int playerNumber, InputDevice[] boundDevices)
    {
        PlayerNumber = playerNumber;
        actionMap = new CoOpInputActionMap();
        actionMap.Enable();
        
        user = InputUser.PerformPairingWithDevice(boundDevices[0]);
        for(int i = 1;i < boundDevices.Length;i++)
        {
            InputUser.PerformPairingWithDevice(boundDevices[i], user);
        }
        
        user.AssociateActionsWithUser(actionMap);
        
        var scheme = InputControlScheme.FindControlSchemeForDevice(user.pairedDevices[0], user.actions.controlSchemes);
        if (scheme != null)
            user.ActivateControlScheme(scheme.Value);
        
        // Setup autogenerated callbacks
        actionMap.Gameplay.SetCallbacks(this);
        
        OnIsMouseChange?.Invoke(boundDevices[0] is Keyboard || boundDevices[0] is Mouse);
    }

    public void OnHorizontalMovement(InputAction.CallbackContext context)
    {
        
    }

    void CoOpInputActionMap.IGameplayActions.OnMove(InputAction.CallbackContext context)
    {
        OnMove?.Invoke(context);
    }

    void CoOpInputActionMap.IGameplayActions.OnLook(InputAction.CallbackContext context)
    {
        OnLook?.Invoke(context);
    }

    void CoOpInputActionMap.IGameplayActions.OnJump(InputAction.CallbackContext context)
    {
        OnJump?.Invoke(context);
    }

    void CoOpInputActionMap.IGameplayActions.OnSprint(InputAction.CallbackContext context)
    {
        OnSprint?.Invoke(context);
    }
}
